#include<iostream>
#include<vector>
#include<queue>
#include<stack>
#include<string>
using namespace std;

class x {
	int dval;
public:
	x(int v) :dval(v){}
	int getVal() const { return dval; }
	bool operator<(const x& other) const{
		return dval < other.dval;
	}
	bool operator==(const x& other) const {
		return dval == other.dval;
	}
	bool operator>(const x& other) const {
		return dval > other.dval;
	}
};
// overlaod the stream cout<<
ostream& operator<<(ostream& os, const x& a) {
	os << "x( " << a.getVal() << ")";
	return os;
}

template<typename T> 
void printVector(const vector<T>& vec, const string& name = "vector") {
	cout << name << ": ";
	for (const auto& element : vec) {
		cout << element << " ";
	}
	cout << "\n";
}
template<typename T>
class xManager {
	vector<T> items;

public:
	void add(const T& item) {
		items.push_back(item);
		cout << "Added: " << item << "\n";
	}
	void display() const {
		// display items, "xmanager"
		printVector(items, "xManager");
	}
};
int main() {

	xManager<x> manager;
	manager.add(x(10));
	manager.add(x(5));
	manager.add(x(15));
	manager.display();
	return 0;
}
